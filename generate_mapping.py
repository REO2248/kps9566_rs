#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
KPS_9566.txt에서 부호표를 읽어 mapping.rs 화일을 생성합니다.
"""

import sys
import os
from typing import Dict, Tuple

def parse_kps9566_file(file_path: str) -> Dict[int, str]:
    """
    KPS_9566.txt을 해석하여 코드표을 반환합니다.

    Args:
        file_path: KPS_9566.txt 경로

    Returns:
        바이트렬 -> 문자할당사전
    """
    mapping = {}
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                
                if not line:
                    continue
                
                # タブまたは空白で分割
                parts = line.split()
                if len(parts) < 2:
                    print(f"경고: 행 {line_num}: 무효한 형식 '{line}'", file=sys.stderr)
                    continue
                
                try:
                    # 16진수바이트렬을 해석
                    byte_code = int(parts[0], 16)
                    # 문자를 가져오기 (첫번째 문자)
                    character = parts[1][0] if parts[1] else '?'
                    
                    mapping[byte_code] = character
                    
                except ValueError as e:
                    print(f"경고: 행 {line_num}: 바이트렬해석오유 '{parts[0]}': {e}", file=sys.stderr)
                    continue
                except IndexError as e:
                    print(f"경고: 행 {line_num}: 문자 가져오기 오유: {e}", file=sys.stderr)
                    continue
                    
    except FileNotFoundError:
        print(f"오유: 화일 '{file_path}'을 찾을수 없습니다", file=sys.stderr)
        sys.exit(1)
    except UnicodeDecodeError as e:
        print(f"오유: 화일읽기오유: {e}", file=sys.stderr)
        sys.exit(1)
    
    return mapping

def generate_rust_mapping(mapping: Dict[int, str]) -> str:
    """
    문자할당사전에서 Rust코드를 생성

    Args:
        mapping: 바이트렬 -> 문자의 매핑 사전

    Returns:
        Rust 코드 문자렬
    """
    rust_code = []
    
    # 화일머리부
    rust_code.append("// 이 화일은 자동적으로 생성되였습니다. 수동으로 편집하지 마십시오.")
    rust_code.append("// generated by generate_mapping.py")
    rust_code.append("")
    rust_code.append("use std::collections::HashMap;")
    rust_code.append("")
    rust_code.append("/// KPS 9566 부호화 문자표를 생성합니다.")
    rust_code.append("pub fn create_kps9566_mapping() -> HashMap<u16, char> {")
    rust_code.append("    let mut mapping = HashMap::with_capacity({});".format(len(mapping)))
    rust_code.append("")
    
    ranges = {
        "0x8000": [],
        "0x9000": [],
        "0xA000": [],
        "0xB000": [],
        "0xC000": [],
        "0xD000": [],
        "0xE000": [],
        "0xF000": [],
        "other": []
    }
    
    for byte_code, char in sorted(mapping.items()):
        range_key = f"0x{(byte_code & 0xF000):X}00"
        if range_key in ranges:
            ranges[range_key].append((byte_code, char))
        else:
            ranges["other"].append((byte_code, char))
    
    for range_name, entries in ranges.items():
        if not entries:
            continue
            
        rust_code.append(f"    // {range_name} 範囲")
        
        for byte_code, char in entries:
            escaped_char = char.replace('\\', '\\\\').replace('\'', '\\\'')
            rust_code.append(f"    mapping.insert(0x{byte_code:04X}, '{escaped_char}');")
        
        rust_code.append("")
    
    rust_code.append("    mapping")
    rust_code.append("}")
    rust_code.append("")
    
    rust_code.append("#[cfg(test)]")
    rust_code.append("mod tests {")
    rust_code.append("    use super::*;")
    rust_code.append("")
    rust_code.append("    #[test]")
    rust_code.append("    fn test_mapping_size() {")
    rust_code.append(f"        let mapping = create_kps9566_mapping();")
    rust_code.append(f"        assert_eq!(mapping.len(), {len(mapping)});")
    rust_code.append("    }")
    rust_code.append("")
    rust_code.append("    #[test]")
    rust_code.append("    fn test_sample_mappings() {")
    rust_code.append("        let mapping = create_kps9566_mapping();")
    
    sample_cases = list(sorted(mapping.items()))[:5]
    for byte_code, char in sample_cases:
        escaped_char = char.replace('\\', '\\\\').replace('\'', '\\\'')
        rust_code.append(f"        assert_eq!(mapping.get(&0x{byte_code:04X}), Some(&'{escaped_char}'));")
    
    rust_code.append("    }")
    rust_code.append("}")
    
    return '\n'.join(rust_code)

def main():
    """주함수"""
    input_file = "KPS_9566.txt"
    output_file = "src/mapping.rs"
    
    if len(sys.argv) > 1:
        input_file = sys.argv[1]
    if len(sys.argv) > 2:
        output_file = sys.argv[2]
    
    print(f"입력화일: {input_file}")
    print(f"출력화일: {output_file}")
    
    print("KPS 9566 화일을 해석중...")
    mapping = parse_kps9566_file(input_file)
    print(f"  {len(mapping)} 개 항목을 읽었습니다")

    # 통계정보를 현시
    ranges_stats = {}
    for byte_code in mapping.keys():
        range_key = byte_code & 0xF000
        ranges_stats[range_key] = ranges_stats.get(range_key, 0) + 1

    print("범위별통계:")
    for range_code, count in sorted(ranges_stats.items()):
        print(f"  0x{range_code:04X}: {count} 개 항목")

    # Rust 코드를 생성
    print("Rust 코드를 생성중...")
    rust_code = generate_rust_mapping(mapping)

    # 화일에 출력
    output_dir = os.path.dirname(output_file)
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(rust_code)
        print(f"Rust 문자표화일을 생성했습니다: {output_file}")

        # 화일크기를 현시
        file_size = os.path.getsize(output_file)
        print(f"  화일크기: {file_size:,} 바이트")

    except IOError as e:
        print(f"오유: 화일의 쓰기에 실패하였습니다: {e}", file=sys.stderr)
        sys.exit(1)

    print("완료되였습니다!")

if __name__ == "__main__":
    main()
